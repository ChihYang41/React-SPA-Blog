{"version":3,"sources":["nav/nav.js","about/about.js","home/home.js","post/post.js","single_post/SinglePost.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","to","Item","text","exact","path","children","match","BlogNavbar","bg","expand","Toggle","aria-controls","Collapse","id","About","Component","VideoToggle","useState","open","setOpen","Fragment","onClick","aria-expanded","in","style","width","height","aspect","aspectRatio","src","frameBorder","allow","allowFullScreen","Home","Card","posts","history","map","post","key","push","title","body","Posts","state","axios","get","then","res","setState","data","this","withRouter","Loading","animation","role","singlePost","postId","params","App","component","SinglePost","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd8c4d21.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link, Route } from \"react-router-dom\";\nimport './nav.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nfunction Title(props) {\n  return (\n    <Link className=\"navbar-brand\" to=\"/\">Blog</Link>\n  )\n}\n\nfunction Item(props) {\n  const { text, exact, to } = props;\n  return (\n    <Route\n      path={to}\n      exact={exact}\n      children={({ match }) => (\n        <li className={match ? \"active\" : \"\"}>\n          {match ? \"> \" : \"\"}\n          <Link to={to}>{text}</Link>\n        </li>\n      )}\n    />\n  )\n}\n\nfunction BlogNavbar() {\n  return (\n    <Navbar bg=\"dark\" expand=\"lg\">\n      <Title/>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Item text=\"Home\" to=\"/React-SPA-Blog/\" exact={true}>Home</Item>\n          <Item text=\"Posts\" to=\"/React-SPA-Blog/posts\">Posts</Item>\n          <Item text=\"About\" to=\"/React-SPA-Blog/about\">About</Item>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default BlogNavbar;","import React, { Component } from 'react';\nimport './about.css';\n\nclass About extends Component {\n  render() {\n    return (\n      <div>\n        <h2>About</h2>\n        <p>最 young 的 Blog</p>\n        <p>白天是 Student，晚上是 American club 的 security guard.</p>\n      </div>\n    );\n  }\n}\n\nexport default About;","import React, { Component, useState } from 'react';\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\nimport Button from 'react-bootstrap/Button';\nimport Fade from 'react-bootstrap/Fade'\nimport './home.css';\n\nfunction VideoToggle() {\n  const [open, setOpen] = useState(false);\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => setOpen(!open)}\n        aria-controls=\"example-fade-text\"\n        aria-expanded={open}\n      >\n        來首歌好嗎？\n      </Button>\n      <Fade in={open}>\n        <div style={{ width: 660, height: 'auto' }} className=\"home-page-video\">\n          <ResponsiveEmbed aspect=\"a16by9\" aspectRatio=\"16by9\">\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0dxP6oEuNHM\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n          </ResponsiveEmbed>\n        </div>\n      </Fade>\n    </React.Fragment>\n  );\n}\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Home Page</h2>\n        <p>E 世代最ㄅㄧㄤˋ的事情，就是到戰略高手上奇摩家族，一邊用即時通把妹，或是帶著最新的哈電族跟同一掛的麻吉去西門町壓馬路。</p>\n        <p>如果有人看不懂，哇哩咧，你們就真的是LKK了。</p>\n        <VideoToggle />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport './post.css';\n\nfunction Card(props) {\n  const { posts, history } = props;\n  return (\n    posts.map(post => {\n      return (\n        <div key={post.id} className=\"card text-white bg-dark mb-3\" onClick={() => {\n          history.push('/React-SPA-Blog/posts/' + post.id)\n        }}>\n          <div className=\"card-header\">{post.id}</div>\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">{post.title}</h4>\n            <p className=\"card-text\">{post.body}</p>\n          </div>\n        </div>\n      )\n    })\n  )\n}\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n    }\n  }\n\n  componentDidMount() {\n    axios.get('https://qootest.com/posts')\n      .then(res => {\n        this.setState({\n          posts: res.data\n        })\n      })\n  }\n\n  render() {\n    const { posts } = this.state;\n    const { history } = this.props;\n    return (\n      <div>\n        <h2>Posts</h2>\n        <div className=\"post-list\">\n          <Card posts={posts} key={posts.id} history={history}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Posts);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './post.css';\nimport Spinner from 'react-bootstrap/Spinner';\n\nfunction Loading() {\n  return (\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  )\n}\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      singlePost: {}\n    }\n  }\n\n  componentDidMount() {\n    const postId = this.props.match.params.id;\n    axios.get('https://qootest.com/posts/' + postId)\n      .then(res => {\n        this.setState({\n          singlePost: res.data\n        })\n      })\n  }\n\n  render() {\n    const { singlePost } = this.state;\n    return (\n      <div>\n        <div className=\"content\">\n          <h2>{!singlePost.title ? <Loading /> : singlePost.title}</h2>\n          <p className=\"card-content\">{singlePost.body}</p>\n        </div>\n        <div>\n          <Link to='/React-SPA-Blog/posts' className=\"btn btn-outline-secondary\"> Go back </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Posts;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './bootstrap.min.css'\nimport './App.css';\nimport BlogNavbar from './nav/nav.js';\nimport About from './about/about.js';\nimport Home from './home/home.js';\nimport Posts from './post/post.js';\nimport SinglePost from './single_post/SinglePost.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <BlogNavbar/>\n          <div className=\"main-page\">\n            <Route exact path=\"/React-SPA-Blog/\" component={Home} />\n            <Route exact path=\"/React-SPA-Blog/posts\" component={Posts} />\n            <Route path=\"/React-SPA-Blog/about\" component={About} />\n            <Route path=\"/React-SPA-Blog/posts/:id\" component={SinglePost} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}