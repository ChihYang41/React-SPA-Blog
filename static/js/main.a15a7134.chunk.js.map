{"version":3,"sources":["nav/nav.js","about/about.js","home/home.js","post/post.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","href","Item","text","onClick","Nav","handleActive","this","id","Component","About","Home","Card","posts","map","post","key","title","body","Post","goBack","setState","singlePostId","singlePost","setId","getSinglePost","fetch","state","then","res","json","data","prevProps","prevState","type","App","page","isFocus","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a15a7134.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './nav.css';\n\nfunction Title(props) {\n  return (\n    <a className=\"navbar-brand\" href=\"#\">Blog</a>\n  )\n}\n\nfunction Item(props) {\n  const { text, onClick } = props;\n  return (\n    <li className=\"nav-item\" onClick={onClick}>\n      <a className=\"nav-link\" href=\"#\">{text}</a>\n    </li>\n  )\n}\n\nclass Nav extends Component {\n  render() {\n    const { handleActive } = this.props\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <Title />\n        <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\n          <ul className=\"navbar-nav mr-auto\">\n            <Item text='Home' onClick={() => handleActive('Home')}/>\n            <Item text='Posts' onClick={() => handleActive('Posts')}/>\n            <Item text='About' onClick={() => handleActive('About')}/>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;","import React, { Component } from 'react';\nimport './about.css';\n\nclass About extends Component {\n  render() {\n    return (\n      <div>\n        <h2>About</h2>\n        <p>最 young 的 Blog</p>\n        <p>白天是 Student，晚上是 American club 的 security guard.</p>\n      </div>\n    );\n  }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport './home.css';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Home Page</h2>\n        <p>E 世代最ㄅㄧㄤˋ的事情，就是到戰略高手上奇摩家族，一邊用即時通把妹，或是帶著最新的哈電族跟同一掛的麻吉去西門町壓馬路。</p>\n        <p>如果有人看不懂，哇哩咧，你們就真的是LKK了。</p>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n\n","import React, { Component } from 'react';\nimport './post.css';\n\nfunction Card(props) {\n  const { posts, onClick } = props;\n  return (\n    posts.map(post => {\n      return (\n        <div key={post.id} className=\"card text-white bg-dark mb-3\" onClick={() => onClick(post.id)}>\n          <div className=\"card-header\">{post.id}</div>\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">{post.title}</h4>\n            <p className=\"card-text\">{post.body}</p>\n          </div>\n        </div>\n      )\n    }))\n}\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      singlePostId: null,\n      singlePost: {},\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(res => res.json())\n      .then(data => this.setState({\n        posts: data\n      }))\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.singlePostId !== this.state.singlePostId && this.state.singlePostId !== null) {\n      this.getSinglePost()\n    }\n  }\n\n  goBack = () => {\n    this.setState({\n      singlePostId: null,\n      singlePost: {},\n    })\n  }\n\n  setId = (id) => {\n    this.setState({\n      singlePostId: id\n    })\n  }\n\n  getSinglePost = () => {\n    fetch('https://jsonplaceholder.typicode.com/posts/' + this.state.singlePostId)\n      .then(res => res.json())\n      .then(data => this.setState({\n        singlePost: data\n      }))\n  }\n\n  render() {\n    const { posts, singlePostId, singlePost } = this.state;\n    return (\n      <div>\n        <h2>Posts</h2>\n        <div className=\"post-list\">\n            {\n              !singlePostId &&\n              <Card posts={posts} onClick={this.setId} key={posts.id}/>\n            }\n            {\n              singlePostId &&\n              <div>\n                <h2>{singlePost.title}</h2>\n                <p className=\"card-text\">{singlePost.body}</p>\n              </div>\n            }\n            {\n              singlePostId &&\n              <div>\n                <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={this.goBack}>Go back</button>\n              </div>\n            }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Post;","import React, { Component } from 'react';\nimport './bootstrap.min.css'\nimport './App.css';\nimport Nav from './nav/nav.js';\nimport About from './about/about.js';\nimport Home from './home/home.js';\nimport Post from './post/post.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFocus: 'Home',\n    }\n  }\n\n  handleActive = (page) => {\n    this.setState({\n      isFocus: page\n    })\n  }\n  render() {\n    const { isFocus } = this.state;\n    return (\n      <div className=\"App\">\n        <Nav handleActive={this.handleActive}/>\n        <div className=\"main-page\">\n          {isFocus === 'Home' && <Home />}\n          {isFocus === 'Posts' && <Post />}\n          {isFocus === 'About' && <About />}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}